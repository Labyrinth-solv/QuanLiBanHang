package Controller.menuController;

import Database.Database;
import Model.Employee;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.util.converter.NumberStringConverter;
import java.sql.*;
import java.time.LocalDate;

public class AddEmployeeController {

    @FXML private TextField tfName;
    @FXML private DatePicker dpBirth;
    @FXML private ComboBox<String> cbGender;
    @FXML private ComboBox<String> cbShift;
    @FXML private TextField tfSalary;
    @FXML private Label lbHeader;
    @FXML private Button btnSave;

    private Runnable onSaveCallback;
    private Employee employee;

    /** D√πng cho c·∫£ th√™m m·ªõi v√† s·ª≠a */
    @FXML
    public void initialize() {
        cbGender.getItems().addAll("Nam", "N·ªØ", "Kh√°c");
        cbShift.getItems().addAll("Ca s√°ng", "Ca chi·ªÅu", "Ca t·ªëi");
    }

    /** Thi·∫øt l·∫≠p callback sau khi l∆∞u */
    public void setOnSave(Runnable callback) {
        this.onSaveCallback = callback;
    }

    /** Thi·∫øt l·∫≠p nh√¢n vi√™n hi·ªán t·∫°i (n·∫øu l√† s·ª≠a) */
    public void setEmployee(Employee emp) {
        this.employee = emp;

        if (emp != null) {
            // Hi·ªÉn th·ªã th√¥ng tin c≈©
            tfName.setText(emp.getName());
            dpBirth.setValue(emp.getBirth());
            cbGender.setValue(emp.getGender());
            cbShift.setValue(emp.getShift());
            tfSalary.setText(String.valueOf(emp.getSalary()));

            // ƒê·ªïi ti√™u ƒë·ªÅ v√† n√∫t
            if (lbHeader != null)
                lbHeader.setText("‚úèÔ∏è S·ª≠a Th√¥ng Tin Nh√¢n Vi√™n");
            if (btnSave != null)
                btnSave.setText("üíæ C·∫≠p nh·∫≠t");
        } else {
            this.employee = new Employee(); // th√™m m·ªõi
        }

        // D√πng binding hai chi·ªÅu ƒë·ªÉ form c·∫≠p nh·∫≠t tr·ª±c ti·∫øp v√†o model
        tfName.textProperty().bindBidirectional(this.employee.nameProperty());
        dpBirth.valueProperty().bindBidirectional(this.employee.birthProperty());
        cbGender.valueProperty().bindBidirectional(this.employee.genderProperty());
        cbShift.valueProperty().bindBidirectional(this.employee.shiftProperty());
        tfSalary.textProperty().bindBidirectional(this.employee.salaryProperty(), new NumberStringConverter());
    }

    /** X·ª≠ l√Ω l∆∞u / c·∫≠p nh·∫≠t */
    @FXML
    public void onSave() {
        try (Connection conn = Database.getConnection()) {
            if (employee.getName() == null || employee.getName().isBlank()) {
                new Alert(Alert.AlertType.WARNING, "Vui l√≤ng nh·∫≠p t√™n nh√¢n vi√™n!").showAndWait();
                return;
            }
            if (employee.getBirth() == null) {
                new Alert(Alert.AlertType.WARNING, "Vui l√≤ng ch·ªçn ng√†y sinh!").showAndWait();
                return;
            }

            if (employee.getId() > 0) {
                // --- UPDATE ---
                String sql = "UPDATE employee SET name=?, birth=?, gender=?, shift=?, salary=? WHERE id=?";
                try (PreparedStatement ps = conn.prepareStatement(sql)) {
                    ps.setString(1, employee.getName());
                    ps.setDate(2, Date.valueOf(employee.getBirth()));
                    ps.setString(3, employee.getGender());
                    ps.setString(4, employee.getShift());
                    ps.setDouble(5, employee.getSalary());
                    ps.setInt(6, employee.getId());
                    ps.executeUpdate();
                }
                new Alert(Alert.AlertType.INFORMATION, "C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng!").showAndWait();
            } else {
                // --- INSERT ---
                String sql = "INSERT INTO employee (name, birth, gender, shift, salary) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement ps = conn.prepareStatement(sql)) {
                    ps.setString(1, employee.getName());
                    ps.setDate(2, Date.valueOf(employee.getBirth()));
                    ps.setString(3, employee.getGender());
                    ps.setString(4, employee.getShift());
                    ps.setDouble(5, employee.getSalary());
                    ps.executeUpdate();
                }
                new Alert(Alert.AlertType.INFORMATION, "Th√™m nh√¢n vi√™n m·ªõi th√†nh c√¥ng!").showAndWait();
            }

            if (onSaveCallback != null) onSaveCallback.run();

        } catch (SQLException e) {
            e.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "L·ªói khi l∆∞u v√†o database:\n" + e.getMessage()).showAndWait();
        }
    }

    @FXML
    public void onCancel() {
        tfName.getScene().getWindow().hide();
    }
}
